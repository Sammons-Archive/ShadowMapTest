/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.isocial.shade.shadecore;

import javax.swing.JPanel;
import org.jdesktop.mtgame.RenderBuffer;
import org.jdesktop.mtgame.RenderUpdater;
import org.jdesktop.mtgame.ShadowMapRenderBuffer;
import org.jdesktop.mtgame.WorldManager;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

// Variables declaration - do not modify
/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//edu.isocial.shade.shadecore//Main//EN",
autostore = false)
@TopComponent.Description(preferredID = "MainTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "edu.isocial.shade.shadecore.MainTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_MainAction",
preferredID = "MainTopComponent")
@Messages({
    "CTL_MainAction=Main",
    "CTL_MainTopComponent=Main Window",
    "HINT_MainTopComponent=This is a Main window"
})
public final class MainTopComponent extends TopComponent implements RenderUpdater {

    private WorldManager worldManager;
    private int width = 800;
    private int height = 600;
    private ShadowMapRenderBuffer shadow;
    private CanvasBuilder canvasBuilder;
    private CameraEntityBuilder cameraBuilder;
    private GridEntityBuilder gridBuilder;
    private AxisEntityBuilder axisBuilder;
    private LightNodeBuilder lightBuilder;
    private ShapeEntityBuilder teapotBuilder;
    private FloorEntityBuilder floorBuilder;

    public MainTopComponent() {
        initComponents();
        setName(Bundle.CTL_MainTopComponent());
        setToolTipText(Bundle.HINT_MainTopComponent());

        construct();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPane = new javax.swing.JPanel();

        setPreferredSize(new java.awt.Dimension(1000, 600));

        javax.swing.GroupLayout mainPaneLayout = new javax.swing.GroupLayout(mainPane);
        mainPane.setLayout(mainPaneLayout);
        mainPaneLayout.setHorizontalGroup(
            mainPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );
        mainPaneLayout.setVerticalGroup(
            mainPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(319, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mainPane;
    // End of variables declaration//GEN-END:variables

    private void construct() {

        new Thread(new Runnable() {
            @Override
            public void run() {
                initialize();
            }
        }).start();
    }

    private void initialize() {
        worldManager = new WorldManager("TestWorld");
        worldManager.getRenderManager().setDesiredFrameRate(60);

        canvasBuilder = new CanvasBuilder();
        canvasBuilder.buildCanvas(mainPane, worldManager);

        cameraBuilder = new CameraEntityBuilder();
        cameraBuilder.buildCamera(worldManager, canvasBuilder);

        gridBuilder = new GridEntityBuilder();
        gridBuilder.buildGrid(worldManager);

        axisBuilder = new AxisEntityBuilder();
        axisBuilder.buildAxis(worldManager);

        lightBuilder = new LightNodeBuilder();
        lightBuilder.buildLight(worldManager);
        shadow = lightBuilder.getShadow();

        teapotBuilder = new ShapeEntityBuilder(shadow, this);
        teapotBuilder.buildTeapot(worldManager, 0, 0, 0);

        floorBuilder = new FloorEntityBuilder();
        floorBuilder.createFloor(worldManager, shadow);
    }

    
    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
    }

    @Override
    public void update(Object object) {
        shadow = (ShadowMapRenderBuffer) object;
    }
}
